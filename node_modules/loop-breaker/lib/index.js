'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (str) {
  var ast = _recast2.default.parse(str);
  var i = 0;
  ast.program.body = loopBreaker.concat(ast.program.body);
  _recast2.default.visit(ast, {
    visitWhileStatement: function visitWhileStatement(loop) {
      fixLoop(loop, i++);
      this.traverse(loop);
    },
    visitForStatement: function visitForStatement(loop) {
      fixLoop(loop, i++);
      this.traverse(loop);
    },
    visitDoWhileStatement: function visitDoWhileStatement(loop) {
      fixLoop(loop, i++);
      this.traverse(loop);
    }
  });
  return _recast2.default.print(ast).code;
};

var _recast = require('recast');

var _recast2 = _interopRequireDefault(_recast);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var types = _recast2.default.types;
var n = types.namedTypes;
var b = types.builders;

var loopBreaker = _recast2.default.parse('var __loopBreaker = (function() {\n  var loops = {};\n\n  return {\n    check: function(i) {\n      if (!loops[i]) {\n        loops[i] = {startTime: Date.now(), count: 0}\n      }\n      var loop = loops[i];\n\n      if (loop.safe) {\n        return;\n      }\n\n      loop.count += 1;\n      if (loop.count > 10000 && (Date.now() - loop.startTime > 1000)) {\n        throw new Error("Loop Broken!");\n      }\n    },\n\n    markSafe: function(i) {\n      if (!loops[i]) {\n        loops[i] = {};\n      }\n\n      loops[i].safe = true;\n    }\n  };\n}());\n').program.body;

function fixLoop(_ref, i) {
  var node = _ref.node,
      parentPath = _ref.parentPath;

  var check = _recast2.default.parse('__loopBreaker.check(' + i + ');').program.body;
  var markSafe = _recast2.default.parse('__loopBreaker.markSafe(' + i + ');').program.body;
  if (n.BlockStatement.check(node.body)) {
    node.body.body = check.concat(node.body.body);
  } else {
    node.body = b.blockStatement([].concat(_toConsumableArray(check), [node.body]));
  }
  parentPath.replace([].concat(_toConsumableArray(parentPath.value), _toConsumableArray(markSafe)));
}

module.exports = exports['default'];